{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Amruthab3/cfp/blob/main/Linear%20Regression\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0HRDnUtCpZpY"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from tqdm import tqdm\n",
        "from sklearn.model_selection import train_test_split\n",
        "import matplotlib.pyplot as plt\n",
        "import random\n",
        "import math\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 145
        },
        "id": "3kAygtyytrIZ",
        "outputId": "1f997d06-0ea9-4989-bac9-3ed3bf613b0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-f8031788-6572-4fde-aa81-af4e807cd905\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-f8031788-6572-4fde-aa81-af4e807cd905\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving concreteData.csv to concreteData (1).csv\n",
            "Saving housing.csv to housing (1).csv\n",
            "Saving yachtData.csv to yachtData (1).csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = []\n",
        "df1 = pd.read_csv('housing.csv')\n",
        "df2 = pd.read_csv('yachtData.csv')\n",
        "df3 = pd.read_csv('concreteData.csv')\n",
        "df1.name='Housing data'\n",
        "df2.name='Yacht Data'\n",
        "df3.name='Concrete Data'\n",
        "data.append(df1)\n",
        "data.append(df2)\n",
        "data.append(df3)"
      ],
      "metadata": {
        "id": "nAdlfw6Ujraj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "stfCkPnkpZpc"
      },
      "outputs": [],
      "source": [
        "class LinearRegression:\n",
        "\n",
        "  def __init__(self, \n",
        "               X,\n",
        "               y, \n",
        "               learningRate,\n",
        "               epsilon, \n",
        "               tolerance, \n",
        "               maxIteration, \n",
        "               error, \n",
        "               gd = False, \n",
        "               sgd = False, \n",
        "               reg = False) -> None:\n",
        "\n",
        "    self.X = X\n",
        "    self.y = y\n",
        "    self.learningRate = learningRate\n",
        "    self.epsilon = epsilon\n",
        "    self.maxIteration = maxIteration\n",
        "    self.tolerance = tolerance\n",
        "    self.gd = gd\n",
        "    self.sgd = sgd\n",
        "    self.reg = reg\n",
        "    self.error = error\n",
        "\n",
        "  def splitTrainTest(self):\n",
        "\n",
        "    X_train, X_test, y_train, y_test = train_test_split(self.X,\n",
        "                                                        self.y,\n",
        "                                                        test_size=0.3,\n",
        "                                                        shuffle = True,\n",
        "                                                        random_state = 0)\n",
        "    \n",
        "    return X_train, X_test, y_train, y_test\n",
        "\n",
        "  def addX0(self, X):\n",
        "    return np.column_stack([np.ones(X.shape[0]), X])\n",
        "\n",
        "  #Normalizing data\n",
        "  def normalizeTrain(self, X):\n",
        "    mean = np.mean(X, 0)\n",
        "    std = np.std(X, 0)\n",
        "    normalized = (X - mean) / std\n",
        "    normalized = self.addX0(normalized)\n",
        "    return normalized, mean, std\n",
        "\n",
        "  #Normalising test data\n",
        "  def normalizeTest(self, X, mean, std):\n",
        "    normalized = (X - mean) / std\n",
        "    normalized = self.addX0(normalized)\n",
        "    return normalized\n",
        "\n",
        "  #Check if matrix is full rank\n",
        "  def checkRank(self, X):\n",
        "    #u, S, v = np.linalg.svd(X)\n",
        "    #rank = len([i for i in s if i>0])\n",
        "    rank = np.linalg.matrix_rank(X)\n",
        "    if rank == min(X.shape[0], X.shape[1]):\n",
        "      self.fullRank = True\n",
        "      print('Matrix is full rank')\n",
        "    else:\n",
        "      self.fullRank = False\n",
        "      print('Matrix is not full rank')\n",
        "\n",
        "  #Check for matrix Invertibilty\n",
        "  def checkInvertibility(self, X):\n",
        "    if X.shape[1] > X.shape[0]:\n",
        "      self.lowRank = True\n",
        "      print('Matrix is low rank')\n",
        "    else:\n",
        "      self.lowRank = False\n",
        "\n",
        "  #Closed form solution definition without regularization\n",
        "  def normalEquation(self, X, y):\n",
        "      w = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n",
        "      return w\n",
        "\n",
        "  #Closed form solution with regularization\n",
        "  def cls_regularization(self,X,y):     \n",
        "    X_dim = self.addX0(X)\n",
        "    dimension = X_dim.shape[1]\n",
        "  # Identity matrix of dimension should be same as the input matrix\n",
        "    A = np.identity(dimension-1) \n",
        "    w = np.linalg.inv((X.T).dot(X)+self.epsilon*A).dot(X.T).dot(y)\n",
        "    return w\n",
        "\n",
        "  def predict(self, X):\n",
        "      y_hat = X.dot(self.w)\n",
        "      return y_hat\n",
        "\n",
        "  #Sum of squared errors\n",
        "  def sse(self, X, y):\n",
        "      y_hat = self.predict(X)\n",
        "      return ((y_hat - y)**2).sum()\n",
        "\n",
        "  #Root mean squared error\n",
        "  def rmse(self, X, y):      \n",
        "    return math.sqrt(self.sse(X,y)/y.size)\n",
        "\n",
        "  #Cost function definition\n",
        "  def costFunction(self, X, y):\n",
        "      return self.sse(X, y) / 2   \n",
        "\n",
        "  def costDerivative(self, X, y):\n",
        "      return X.T.dot(self.predict(X) - y)\n",
        "\n",
        "  #Stochastic CF definition\n",
        "  def stochastic_cf(self,X,y):      \n",
        "    y_hat = self.predict(X)\n",
        "    z = self.epsilon*(self.w)\n",
        "    return (y_hat - y).dot(X) + self.epsilon*(self.w**2)\n",
        "\n",
        "  #Stochastic CF definition with regularization\n",
        "  def scf_regularization(self,X,y):      \n",
        "    y_hat = self.predict(X)\n",
        "    z = self.epsilon*(self.w)\n",
        "    return (y_hat - y).dot(X) + self.epsilon*(self.w**2)\n",
        "\n",
        "  #Gradient descent definition\n",
        "  def gradientDescent(self, X, y):        \n",
        "    errors = []\n",
        "    self.costvalues = []\n",
        "    last_error = float('inf')\n",
        "    for i in tqdm(range(self.maxIteration)):\n",
        "      self.w = self.w - self.learningRate * self.costDerivative(X, y)\n",
        "      cost = self.costFunction(X, y)\n",
        "      self.costvalues.append(cost)\n",
        "      if self.error == 'rmse':\n",
        "        current_error = self.rmse(X, y)\n",
        "      else:\n",
        "        current_error = self.sse(X,y)\n",
        "      diff = last_error - current_error\n",
        "      errors.append(current_error)\n",
        "      last_error = current_error\n",
        "      plt.plot(errors)\n",
        "      if diff < self.tolerance:\n",
        "        print('Model stopped Learning')\n",
        "        break\n",
        "      plt.xlabel(\"Iterations\")\n",
        "      plt.ylabel(\"Error\")\n",
        "      plt.title(\"Iterations vs Error\")\n",
        "      plt.plot(errors)\n",
        "\n",
        "  #GD definition with regularization\n",
        "  def gd_Regularization(self, X, y):       \n",
        "    errors = []\n",
        "    self.costvalues = []\n",
        "    last_error = float('inf')\n",
        "    for i in tqdm(range(self.maxIteration)):\n",
        "      self.w = self.w - self.learningRate * self.scf_regularization(X, y)\n",
        "      cost = self.costFunction(X, y)\n",
        "      self.costvalues.append(cost)\n",
        "      if self.error == 'rmse':\n",
        "        current_error = self.rmse(X, y)\n",
        "      else:\n",
        "        current_error = self.sse(X,y)\n",
        "      diff = last_error - current_error\n",
        "      errors.append(current_error)\n",
        "      last_error = current_error\n",
        "      plt.plot(errors)\n",
        "      if diff < self.tolerance:\n",
        "        print('Model stopped Learning')\n",
        "        break\n",
        "      plt.xlabel(\"Iterations\")\n",
        "      plt.ylabel(\"Error\")\n",
        "      plt.title(\"Iterations vs Error\")\n",
        "      plt.plot(errors)\n",
        "\n",
        "  #SGD function definition\n",
        "  def stochastic_gd(self,X,y,k):         \n",
        "    errors = []\n",
        "    self.costValues = []\n",
        "    last_error = float('inf')  \n",
        "    for i in tqdm(range(self.maxIteration)):\n",
        "      b = random.sample(list(X), k)\n",
        "      c = random.sample(list(y),k)\n",
        "      y = np.array(c)\n",
        "      X = np.array(b)\n",
        "      for q,r in zip(X, y):           \n",
        "        self.w = self.w - self.learningRate*self.costDerivative(X,y)\n",
        "        cost = self.costFunction(X, y)\n",
        "        self.costValues.append(cost)            \n",
        "        if self.error == 'rmse':\n",
        "          current_error = self.rmse(X, y)\n",
        "        else:\n",
        "          current_error = self.sse(X,y)\n",
        "        diff = last_error-current_error\n",
        "        last_error = current_error    \n",
        "        errors.append(current_error)\n",
        "        plt.plot(errors)\n",
        "        if diff < self.tolerance:\n",
        "          print('Model stopped Learning')\n",
        "          break\n",
        "    plt.xlabel(\"Iterations\")\n",
        "    plt.ylabel(\"Error\")\n",
        "    plt.title(\"Iterations vs Error\")\n",
        "    plt.plot(errors)\n",
        "\n",
        "    #SGD with regularization funtion definition\n",
        "  def stochastic_gd_Regularization(self,X,y,k):        \n",
        "    errors = []\n",
        "    self.costValues = []\n",
        "    last_error = float('inf')  \n",
        "    for i in tqdm(range(self.maxIteration)):\n",
        "      b = random.sample(list(X), k)\n",
        "      c = random.sample(list(y),k)\n",
        "      y = np.array(c)\n",
        "      X = np.array(b)\n",
        "      for q,r in zip(X, y):           \n",
        "        self.w = self.w - self.learningRate*self.stochastic_cf(X,y)\n",
        "        cost = self.costFunction(X, y)\n",
        "        self.costValues.append(cost)            \n",
        "        if self.error == 'rmse':\n",
        "          current_error = self.rmse(X, y)\n",
        "        else:\n",
        "          current_error = self.sse(X,y)\n",
        "          diff = last_error-current_error\n",
        "          last_error = current_error    \n",
        "          errors.append(current_error)\n",
        "          plt.plot(errors)\n",
        "          if diff < self.tolerance:\n",
        "            print('Model stopped Learning')\n",
        "            break\n",
        "    plt.xlabel(\"Iterations\")\n",
        "    plt.ylabel(\"Error\")\n",
        "    plt.title(\"Iterations vs Error\")\n",
        "    plt.plot(errors)\n",
        "\n",
        "  def fit(self):\n",
        "      self.X_train, self.X_test, self.y_train, self.y_test = self.splitTrainTest()\n",
        "      self.X_train, self.mean, self.std = self.normalizeTrain(self.X_train)\n",
        "      self.X_test = self.normalizeTest(self.X_test, self.mean, self.std)\n",
        "      self.checkRank(self.X_train)\n",
        "      self.checkInvertibility(self.X_train)\n",
        "\n",
        "      if self.fullRank and not self.lowRank and self.X_train.shape[0] <= 10000 and not self.gd and not self.reg and not self.sgd:\n",
        "        print('Solving using Closed form Solution - Normal Equation')\n",
        "        self.w = self.normalEquation(self.X_train, self.y_train)\n",
        "      \n",
        "      elif self.fullRank and not self.lowRank and not self.gd and not self.sgd and self.reg:\n",
        "        print('Solving using closed form solution with regularisation')\n",
        "        self.w = self.cls_regularization(self.X_train, self.y_train)\n",
        "      \n",
        "      elif self.fullRank and not self.lowRank and not self.sgd and self.gd and self.reg:\n",
        "        print('Solving using Gradient Descent with Regularization')\n",
        "        self.w = np.ones(self.X_train.shape[1] ,dtype = np.float64) * 0\n",
        "        self.gd_Regularization(self.X_train,self.y_train)\n",
        "            \n",
        "      elif self.fullRank and not self.lowRank and self.sgd and not self.reg and not self.gd:\n",
        "        print('Solving using Stochastic Gradient Descent')\n",
        "        self.w = np.ones(self.X_train.shape[1] ,dtype = np.float64) * 0\n",
        "        self.stochastic_gd(self.X_train,self.y_train, k=10)\n",
        "\n",
        "      elif self.fullRank and not self.lowRank and self.sgd and self.reg and not self.gd:\n",
        "        print('Solving using Stochastic Gradient Descent with Regularization')\n",
        "        self.w = np.ones(self.X_train.shape[1] ,dtype = np.float64) * 0\n",
        "        self.stochastic_gd_Regularization(self.X_train,self.y_train, k=10)\n",
        "\n",
        "      else:\n",
        "        self.w = np.ones(self.X_train.shape[1], dtype = np.float16) * 0\n",
        "        self.gradientDescent(self.X_train, self.y_train)\n",
        "        \n",
        "      sse = self.sse(self.X_test, self.y_test)\n",
        "      rmse = self.rmse(self.X_test, self.y_test)\n",
        "      print(\"SSE:\",  sse)\n",
        "      print(\"RMSE:\", rmse )\n",
        "      print(\"Final Thetas\")\n",
        "      print(self.w)\n",
        "\n",
        "      #--------------------------------------------------------------\n",
        "\n",
        "\n",
        "  # def gradientDescent(self, X, y):\n",
        "  #    errors = []\n",
        "  #    lastError = float('inf')\n",
        "\n",
        "  #    for i in tqdm(range(self.maxIteration)):\n",
        "  #      self.w = self.w - self.learningRate * self.costDerivative(X, y)\n",
        "  #      currentError = self.sse(X, y)\n",
        "  #      errors.append(currentError)\n",
        "  #      diff = abs(lastError - currentError)\n",
        "  #      lastError = currentError\n",
        "\n",
        "  #      if diff < self.epsilon:\n",
        "  #         print(\"model stopped learning\")\n",
        "  #         break\n",
        "\n",
        "  #   self.plot_rmse(errors)\n",
        "\n",
        "  #   def fit(self):\n",
        "  #       X_train, X_test, y_train, y_test = self.splitTrainTest()\n",
        "  #       X_train, mean, std = self.normalizeTrain(X-train)\n",
        "  #       X-test = self.normalizeTest(X_test, mean, std)\n",
        "  #       self.checkRank(X-train)\n",
        "  #       self.checkINvertibility(X_train)\n",
        "\n",
        "  #       if self.fullRank and not self.lowRank and\\\n",
        "  #        X_train.shape[0] <= 100000 and not self.gd:\n",
        "  #          self.w = self.normalEquation(X_train, y_train)\n",
        "\n",
        "  #       else:\n",
        "  #         self.w = np.ones(X_train)\n",
        "\n",
        "  \n",
        "  # pass\n",
        "\n",
        "\n",
        "\n",
        "  #   def plot_rmse(self, error_sequence):\n",
        "  #       \"\"\"\n",
        "  #       @X: error_sequence, vector of rmse\n",
        "  #       @does: Plots the error function\n",
        "  #       @return: plot\n",
        "  #       \"\"\"\n",
        "  #       # Data for plotting\n",
        "  #       s = np.array(error_sequence)\n",
        "  #       t = np.arange(s.size)\n",
        "\n",
        "  #       fig, ax = plt.subplots()\n",
        "  #       ax.plot(t, s)\n",
        "\n",
        "  #       #ax.set(xlabel='iterations', ylabel=self.error,\n",
        "  #       #      title='{} trend'.format(self.error))\n",
        "  #       ax.grid()\n",
        "\n",
        "  #       plt.legend(bbox_to_anchor=(1.05,1), loc=2, shadow=True)\n",
        "  #       plt.show()    \n",
        "    \n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Assigning Learning Rate and Tolerance\n",
        "learningRate = [0.0004, 0.0007, 0.001]\n",
        "tolerance = [0.005, 0.0001, 0.001]"
      ],
      "metadata": {
        "id": "mPHMjKHNqedh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Closed form solution without regularization\n",
        "i = 0\n",
        "for d in data:\n",
        "  reg = LinearRegression(d.values[:, 0:-1], d.values[:, -1], epsilon = 0.001, learningRate= learningRate[i], tolerance = tolerance[i], maxIteration = 5000, gd=False ,reg=False,error='rmse')\n",
        "  print(d.name)\n",
        "  print('\\n')\n",
        "  reg.fit()\n",
        "  print('\\n\\n\\n')\n",
        "  i+=1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zp-TauKiqg26",
        "outputId": "432738b2-8f70-4948-aa52-0a9001991a13"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Housing data\n",
            "\n",
            "\n",
            "Matrix is full rank\n",
            "Solving using Closed form Solution - Normal Equation\n",
            "SSE: 3250.0044107893395\n",
            "RMSE: 4.624025082730341\n",
            "Final Thetas\n",
            "[22.93399433 -0.90751811  1.04796575  0.38867104  0.6622465  -2.17214484\n",
            "  2.58716716  0.50645061 -2.59559964  2.30818886 -1.67320027 -2.33651383\n",
            "  0.65618617 -3.99472177]\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Yacht Data\n",
            "\n",
            "\n",
            "Matrix is full rank\n",
            "Solving using Closed form Solution - Normal Equation\n",
            "SSE: 7619.25368907198\n",
            "RMSE: 9.0513788464675\n",
            "Final Thetas\n",
            "[10.74271028  0.54271589 -0.48644592  0.53145418 -0.58852203 -0.84401335\n",
            " 12.89451446]\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Concrete Data\n",
            "\n",
            "\n",
            "Matrix is full rank\n",
            "Solving using Closed form Solution - Normal Equation\n",
            "SSE: 38115.413917782505\n",
            "RMSE: 11.106342967100197\n",
            "Final Thetas\n",
            "[35.55869444 13.07061719  9.29612788  6.07754028 -2.38797659  2.13444427\n",
            "  1.74782814  1.75752107  7.36636378]\n",
            "\n",
            "\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Closed form solution with regularization\n",
        "i = 0\n",
        "for d in data:\n",
        "  reg = LinearRegression(d.values[:, 0:-1], d.values[:, -1], epsilon = 0.001, learningRate= learningRate[i], tolerance = tolerance[i], maxIteration = 5000, gd=False ,reg=True,error='rmse')\n",
        "  print(d.name)\n",
        "  print('\\n')\n",
        "  reg.fit()\n",
        "  print('\\n\\n\\n')\n",
        "  i+=1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1JGgmWOeZrEM",
        "outputId": "000f6f85-cc2b-4d9d-cc81-416a4b57077e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Housing data\n",
            "\n",
            "\n",
            "Matrix is full rank\n",
            "Solving using closed form solution with regularisation\n",
            "SSE: 3250.0032448455067\n",
            "RMSE: 4.624024253292388\n",
            "Final Thetas\n",
            "[22.93392937 -0.9075087   1.04794718  0.38863798  0.66225127 -2.1721009\n",
            "  2.58718049  0.50642973 -2.59557244  2.308099   -1.67312074 -2.33650137\n",
            "  0.65618524 -3.99469858]\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Yacht Data\n",
            "\n",
            "\n",
            "Matrix is full rank\n",
            "Solving using closed form solution with regularisation\n",
            "SSE: 7619.222182092553\n",
            "RMSE: 9.051360131911354\n",
            "Final Thetas\n",
            "[10.74266008  0.54271106 -0.48655894  0.53098641 -0.58814081 -0.84356367\n",
            " 12.89445137]\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Concrete Data\n",
            "\n",
            "\n",
            "Matrix is full rank\n",
            "Solving using closed form solution with regularisation\n",
            "SSE: 38115.3819734163\n",
            "RMSE: 11.106338313009832\n",
            "Final Thetas\n",
            "[35.55864506 13.07034278  9.29585262  6.07729726 -2.38816303  2.13444327\n",
            "  1.74763946  1.75727736  7.36634234]\n",
            "\n",
            "\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Gradient Descent without regularization\n",
        "i = 0\n",
        "for d in data:\n",
        "  reg = LinearRegression(d.values[:, 0:-1], d.values[:, -1], epsilon = 0.001, learningRate= learningRate[i], tolerance = tolerance[i], maxIteration = 5000, gd=True ,reg=False,error='rmse')\n",
        "  print(d.name)\n",
        "  print('\\n')\n",
        "  reg.fit()\n",
        "  print('\\n\\n\\n')\n",
        "  i+=1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Li9BKWrIcdKG",
        "outputId": "a35efb02-5acd-475f-9a4f-e499353689c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Housing data\n",
            "\n",
            "\n",
            "Matrix is full rank\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "  1%|          | 30/5000 [00:00<00:12, 412.99it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "SSE: 3395.283493371024\n",
            "RMSE: 4.7262449580778965\n",
            "Final Thetas\n",
            "[22.72928728 -0.71502389  0.61050987 -0.1830346   0.76362304 -0.9822018\n",
            "  3.11998658  0.04996472 -1.84225699  0.70895661 -0.3872768  -2.1058927\n",
            "  0.66462073 -3.52549145]\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Yacht Data\n",
            "\n",
            "\n",
            "Matrix is full rank\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "  1%|          | 34/5000 [00:00<00:09, 542.65it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "SSE: 7599.689380952478\n",
            "RMSE: 9.039750556169599\n",
            "Final Thetas\n",
            "[10.70603678  0.54289055 -0.64431738 -0.11985471 -0.05922033 -0.21884826\n",
            " 12.84617949]\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Concrete Data\n",
            "\n",
            "\n",
            "Matrix is full rank\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "  1%|          | 55/5000 [00:00<00:10, 454.15it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "SSE: 38089.718403162144\n",
            "RMSE: 11.102598664169218\n",
            "Final Thetas\n",
            "[35.55869444 11.44546212  7.65368542  4.65578069 -3.76144984  1.96445066\n",
            "  0.4773556   0.17433981  7.31809345]\n",
            "\n",
            "\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Gradient Descent with regularization\n",
        "\n",
        "i = 0\n",
        "for d in data:\n",
        "  reg = LinearRegression(d.values[:, 0:-1], d.values[:, -1], epsilon = 0.001, learningRate= learningRate[i], tolerance = tolerance[i], maxIteration = 5000, gd=True ,reg=True,error='rmse')\n",
        "  print(d.name)\n",
        "  print('\\n')\n",
        "  reg.fit()\n",
        "  print('\\n\\n\\n')\n",
        "  i+=1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Xi0Us5Bsc4_t",
        "outputId": "ddba617c-58fc-4d55-c240-e420e6fe5150"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Housing data\n",
            "\n",
            "\n",
            "Matrix is full rank\n",
            "Solving using Gradient Descent with Regularization\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "  1%|          | 30/5000 [00:00<00:08, 552.46it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "SSE: 3395.3197773966995\n",
            "RMSE: 4.726270211747522\n",
            "Final Thetas\n",
            "[22.72793095 -0.71502043  0.61051151 -0.18303412  0.76362076 -0.98220673\n",
            "  3.11992569  0.04997629 -1.84227307  0.70896421 -0.38727129 -2.10591168\n",
            "  0.66461485 -3.52556297]\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Yacht Data\n",
            "\n",
            "\n",
            "Matrix is full rank\n",
            "Solving using Gradient Descent with Regularization\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "  1%|          | 34/5000 [00:00<00:08, 593.36it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "SSE: 7599.351928205223\n",
            "RMSE: 9.039549855695501\n",
            "Final Thetas\n",
            "[10.70551993  0.54290751 -0.64431992 -0.11986029 -0.05921012 -0.21884802\n",
            " 12.84543489]\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Concrete Data\n",
            "\n",
            "\n",
            "Matrix is full rank\n",
            "Solving using Gradient Descent with Regularization\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "  1%|          | 55/5000 [00:01<01:36, 51.39it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "SSE: 38089.694713722565\n",
            "RMSE: 11.102595211605218\n",
            "Final Thetas\n",
            "[35.55693848 11.44420165  7.6524863   4.6547173  -3.76223869  1.9644783\n",
            "  0.47657631  0.1733094   7.31798117]\n",
            "\n",
            "\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Stochastic Descent**"
      ],
      "metadata": {
        "id": "kdDCuuefdBDC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Housing data\n",
        "reg = LinearRegression(df1.values[:,0:-1], df1.values[:,-1],epsilon = 0.0001 ,learningRate= 0.0004, tolerance=  0.005, maxIteration=1500, sgd=True ,reg=False,error='rmse')\n",
        "reg.fit()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "bZ5oE9FddA0q",
        "outputId": "2874b149-89cc-4e2a-a28a-a53b96134dca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matrix is full rank\n",
            "Solving using Stochastic Gradient Descent\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "  1%|▏         | 22/1500 [00:00<00:06, 219.56it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  3%|▎         | 48/1500 [00:00<00:06, 231.38it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  5%|▍         | 72/1500 [00:00<00:06, 211.92it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  6%|▋         | 94/1500 [00:00<00:06, 213.83it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  8%|▊         | 118/1500 [00:00<00:06, 217.82it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  9%|▉         | 141/1500 [00:00<00:06, 220.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 11%|█         | 164/1500 [00:00<00:06, 209.99it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 14%|█▍        | 209/1500 [00:00<00:06, 209.52it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 15%|█▌        | 231/1500 [00:01<00:09, 137.64it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 18%|█▊        | 275/1500 [00:01<00:07, 163.21it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 21%|██        | 312/1500 [00:01<00:07, 158.51it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 23%|██▎       | 349/1500 [00:01<00:07, 159.92it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 26%|██▌       | 387/1500 [00:02<00:06, 174.40it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 28%|██▊       | 423/1500 [00:02<00:06, 166.06it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 29%|██▉       | 440/1500 [00:02<00:06, 166.64it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 32%|███▏      | 476/1500 [00:02<00:07, 134.73it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 34%|███▍      | 514/1500 [00:03<00:06, 155.37it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 37%|███▋      | 548/1500 [00:03<00:06, 157.35it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 39%|███▉      | 584/1500 [00:03<00:05, 161.67it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 41%|████      | 617/1500 [00:03<00:05, 151.06it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 43%|████▎     | 648/1500 [00:03<00:06, 138.46it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 45%|████▌     | 678/1500 [00:04<00:05, 138.14it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 47%|████▋     | 710/1500 [00:04<00:07, 110.99it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 49%|████▉     | 737/1500 [00:04<00:06, 118.92it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 52%|█████▏    | 779/1500 [00:05<00:05, 127.64it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 54%|█████▍    | 811/1500 [00:05<00:05, 135.01it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 56%|█████▌    | 839/1500 [00:05<00:05, 131.03it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 58%|█████▊    | 873/1500 [00:05<00:04, 141.58it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 60%|██████    | 904/1500 [00:05<00:04, 146.84it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 62%|██████▏   | 935/1500 [00:06<00:03, 142.91it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 63%|██████▎   | 950/1500 [00:06<00:04, 129.48it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 64%|██████▍   | 964/1500 [00:06<00:04, 131.73it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 66%|██████▌   | 993/1500 [00:06<00:05, 100.83it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 68%|██████▊   | 1022/1500 [00:07<00:04, 116.52it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 70%|███████   | 1050/1500 [00:07<00:03, 116.42it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 72%|███████▏  | 1076/1500 [00:07<00:03, 114.02it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 73%|███████▎  | 1101/1500 [00:07<00:03, 111.30it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 75%|███████▌  | 1126/1500 [00:07<00:03, 114.28it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 77%|███████▋  | 1152/1500 [00:08<00:03, 112.56it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 78%|███████▊  | 1177/1500 [00:08<00:02, 115.44it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 80%|████████  | 1203/1500 [00:08<00:02, 106.55it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 82%|████████▏ | 1225/1500 [00:08<00:02, 97.75it/s] "
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 83%|████████▎ | 1248/1500 [00:09<00:02, 99.42it/s] "
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 85%|████████▍ | 1271/1500 [00:09<00:02, 102.88it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 86%|████████▌ | 1293/1500 [00:09<00:02, 100.64it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 87%|████████▋ | 1304/1500 [00:09<00:02, 95.89it/s] "
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 88%|████████▊ | 1323/1500 [00:09<00:02, 88.03it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 89%|████████▉ | 1333/1500 [00:10<00:01, 89.12it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 90%|█████████ | 1353/1500 [00:10<00:02, 57.31it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 91%|█████████▏| 1371/1500 [00:10<00:01, 67.20it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 93%|█████████▎| 1391/1500 [00:11<00:01, 77.61it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 94%|█████████▍| 1410/1500 [00:11<00:01, 80.96it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 96%|█████████▌| 1435/1500 [00:11<00:00, 97.67it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 97%|█████████▋| 1458/1500 [00:11<00:00, 102.06it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 99%|█████████▊| 1481/1500 [00:11<00:00, 103.97it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 1500/1500 [00:12<00:00, 124.38it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "SSE: 26165.395433307935\n",
            "RMSE: 13.12024235407477\n",
            "Final Thetas\n",
            "[18.5119845  -0.95212237 -0.76046438 -1.69505467 -4.65579215 -0.09911907\n",
            " -1.66536858 -2.34197606 -0.13608294 -0.98314908  1.59111153  2.52775248\n",
            "  2.1237122   0.58290853]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Yatch data\n",
        "reg = LinearRegression(df2.values[:,0:-1], df2.values[:,-1], epsilon = 0.0001 ,learningRate= 0.0007, tolerance=  0.001, maxIteration=1500, sgd=True ,reg=False,error='rmse')\n",
        "reg.fit()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "HBeolaSbda9m",
        "outputId": "05ce835f-f8a7-4e8c-b4fc-cf5ae19e6507"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matrix is full rank\n",
            "Solving using Stochastic Gradient Descent\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "  1%|          | 18/1500 [00:00<00:08, 171.32it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  3%|▎         | 41/1500 [00:00<00:07, 195.07it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  4%|▍         | 61/1500 [00:00<00:07, 191.61it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  5%|▌         | 81/1500 [00:00<00:07, 190.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  7%|▋         | 101/1500 [00:00<00:07, 178.19it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  8%|▊         | 120/1500 [00:00<00:07, 178.03it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  9%|▉         | 139/1500 [00:00<00:07, 181.32it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 11%|█         | 158/1500 [00:00<00:07, 181.24it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 12%|█▏        | 177/1500 [00:00<00:07, 172.74it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 13%|█▎        | 195/1500 [00:01<00:08, 162.67it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 14%|█▍        | 212/1500 [00:01<00:08, 157.01it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 15%|█▌        | 228/1500 [00:01<00:08, 154.83it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 16%|█▋        | 244/1500 [00:01<00:08, 153.94it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 17%|█▋        | 260/1500 [00:01<00:08, 150.09it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 18%|█▊        | 276/1500 [00:01<00:08, 152.26it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 19%|█▉        | 292/1500 [00:01<00:07, 152.15it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 21%|██        | 308/1500 [00:01<00:08, 147.82it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 22%|██▏       | 323/1500 [00:01<00:08, 144.29it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 23%|██▎       | 338/1500 [00:02<00:08, 145.10it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 25%|██▍       | 370/1500 [00:03<00:31, 35.55it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 27%|██▋       | 409/1500 [00:04<00:16, 65.42it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 30%|██▉       | 448/1500 [00:04<00:10, 101.68it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 32%|███▏      | 485/1500 [00:04<00:07, 130.21it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 35%|███▍      | 522/1500 [00:04<00:06, 148.78it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 37%|███▋      | 558/1500 [00:04<00:06, 153.01it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 38%|███▊      | 577/1500 [00:05<00:05, 162.02it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 41%|████      | 612/1500 [00:05<00:07, 124.46it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 43%|████▎     | 643/1500 [00:05<00:06, 133.82it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 45%|████▌     | 677/1500 [00:05<00:05, 144.18it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 47%|████▋     | 710/1500 [00:06<00:05, 146.74it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 49%|████▉     | 742/1500 [00:06<00:05, 147.81it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 52%|█████▏    | 775/1500 [00:06<00:05, 143.26it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 54%|█████▍    | 807/1500 [00:06<00:04, 143.08it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 55%|█████▍    | 822/1500 [00:07<00:06, 107.92it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 56%|█████▌    | 835/1500 [00:07<00:09, 70.84it/s] "
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 56%|█████▋    | 845/1500 [00:07<00:09, 70.56it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 58%|█████▊    | 868/1500 [00:07<00:08, 74.44it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 59%|█████▊    | 881/1500 [00:07<00:07, 84.08it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 59%|█████▉    | 892/1500 [00:08<00:08, 68.75it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 61%|██████    | 909/1500 [00:08<00:12, 47.43it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 62%|██████▏   | 934/1500 [00:08<00:07, 72.23it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 64%|██████▍   | 960/1500 [00:09<00:05, 94.65it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 65%|██████▍   | 972/1500 [00:09<00:08, 59.81it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 66%|██████▋   | 994/1500 [00:09<00:07, 64.91it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 69%|██████▊   | 1029/1500 [00:10<00:05, 87.97it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 71%|███████   | 1060/1500 [00:10<00:03, 115.46it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 72%|███████▏  | 1087/1500 [00:10<00:03, 120.17it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 73%|███████▎  | 1100/1500 [00:10<00:03, 118.85it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 75%|███████▌  | 1126/1500 [00:11<00:03, 113.32it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 78%|███████▊  | 1163/1500 [00:11<00:03, 109.00it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 78%|███████▊  | 1175/1500 [00:11<00:02, 110.90it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 80%|███████▉  | 1197/1500 [00:11<00:04, 65.73it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 81%|████████  | 1211/1500 [00:12<00:03, 78.63it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 83%|████████▎ | 1246/1500 [00:12<00:02, 96.19it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 85%|████████▍ | 1268/1500 [00:12<00:02, 99.27it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 85%|████████▌ | 1280/1500 [00:12<00:02, 100.13it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 87%|████████▋ | 1305/1500 [00:12<00:01, 105.55it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 89%|████████▊ | 1331/1500 [00:13<00:01, 108.07it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 90%|█████████ | 1354/1500 [00:13<00:01, 106.78it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 92%|█████████▏| 1379/1500 [00:13<00:01, 112.19it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 94%|█████████▎| 1405/1500 [00:13<00:00, 116.73it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 95%|█████████▌| 1428/1500 [00:14<00:00, 96.13it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 97%|█████████▋| 1449/1500 [00:14<00:00, 92.13it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 97%|█████████▋| 1459/1500 [00:14<00:00, 87.95it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 98%|█████████▊| 1477/1500 [00:14<00:00, 78.35it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 1500/1500 [00:15<00:00, 99.70it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "Model stopped Learning\n",
            "SSE: 21915.715616882993\n",
            "RMSE: 15.350988766053998\n",
            "Final Thetas\n",
            "[ 5.86075328  0.96194169 -0.5310533  -0.11430003 -0.45367261 -0.28667277\n",
            " -1.09866273]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "regression = LinearRegression(d.values[:, 0:-1], d.values[:, -1], 0.00001, 0.00005, 10000, 0, 0)"
      ],
      "metadata": {
        "id": "sOtf6W9u9SHG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "regression.fit()"
      ],
      "metadata": {
        "id": "RVFt8JYD-LI4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c6c6893e-62ad-4d46-c426-af33473e8bd7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matrix is full rank\n",
            "Solving using Closed form Solution - Normal Equation\n",
            "SSE: 38115.413917782505\n",
            "RMSE: 11.106342967100197\n",
            "Final Thetas\n",
            "[35.55869444 13.07061719  9.29612788  6.07754028 -2.38797659  2.13444427\n",
            "  1.74782814  1.75752107  7.36636378]\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    },
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}